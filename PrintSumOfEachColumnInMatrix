#include <iostream>
#include<iomanip>
using namespace std;
int RandomNumber(int From, int To)
{
	int randNum = rand() % (To - From + 1) + From;
	return randNum;
}
void FillMatrixWithRandomNumbers(int Matrix[3][3],int Rows,int Columns)
{
	for (int i = 0; i < Rows; i++)
		for (int j = 0; j < Columns; j++)
			Matrix[i][j]=RandomNumber(1,100);
}
void PrintMatrix(int Matrix[3][3], int Rows, int Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
			cout <<setw(3)<< Matrix[i][j]<<"  ";
		cout << endl;
	}
		
}
int GetSumOfColumnInMatrix(int Matrix[3][3],int ColumnOrder,int Rows)
{
	int Sum = 0;
	for (int j = 0; j < Rows; j++)
		Sum += Matrix[j][ColumnOrder - 1];
	return Sum;
}
void FillArrayWithColumnSum(int ColumnSum[3], int Matrix[3][3], int Rows, int Columns)
{
	for (int i = 0; i < Columns; i++)
		ColumnSum[i] = GetSumOfColumnInMatrix(Matrix, i + 1, Rows);
}
void PrintSumOfColumnsInMatrix(int ColumnSum[3],int Columns)
{
	for (int i = 0; i < Columns; i++)
		cout << "Sum of column[" << i + 1 << "]= " << ColumnSum[i]<<endl;
		
}
int main()
{
	srand((unsigned)time(NULL));
	int Matrix[3][3];
	int ColumnSum[3];
	FillMatrixWithRandomNumbers(Matrix,3,3);
	PrintMatrix(Matrix,3,3);
	cout << endl;
	FillArrayWithColumnSum(ColumnSum, Matrix, 3, 3);
	PrintSumOfColumnsInMatrix(ColumnSum,3);
	return 0;
}


