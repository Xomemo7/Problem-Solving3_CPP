#include <iostream>
#include <string>
#include <vector>
#include <fstream>
using namespace std;
const string ClientsFileName="Clients.txt";
struct stClientData
{
	string AccountNum = "";
	string PinCode = "";
	string Name = "";
	string PhoneNum = "";
	double AccountBalance = 0;
	bool MarkForDelete = false;
};
vector<string>SplitString(string str, string Delim)
{
	vector<string>vString;

	short pos = 0;
	string sWord;
	while ((pos = str.find(Delim)) != std::string::npos)
	{
		sWord = str.substr(0, pos);
		if (sWord != "")
		{
			vString.push_back(sWord);
		}
		str.erase(0, pos + Delim.length());
	}
	if (str != "")
	{
		vString.push_back(str);
	}

	return vString;
}
stClientData ConvertLineToRecord(string LineOfData, string separator = "#//#")
{
	stClientData Client;
	vector<string>vClientData;
	vClientData = SplitString(LineOfData, separator);
	Client.AccountNum = vClientData[0];
	Client.PinCode = vClientData[1];
	Client.Name = vClientData[2];
	Client.PhoneNum = vClientData[3];
	Client.AccountBalance = stod(vClientData[4]);

	return Client;
}
string ConvertRecordToLine(stClientData Client, string separator = "#//#")
{
	string stClientRecord = "";
	stClientRecord += Client.AccountNum + separator;
	stClientRecord += Client.PinCode + separator;
	stClientRecord += Client.Name + separator;
	stClientRecord += Client.PhoneNum + separator;
	stClientRecord += to_string(Client.AccountBalance);

	return stClientRecord;
}
vector<stClientData>SaveClientsDataToFile(string FileName, vector<stClientData> vClients)
{
	fstream MyFile;     MyFile.open(FileName, ios::out);
	string DataLine;
	if (MyFile.is_open())
	{ 
		for (stClientData C : vClients)
		{ 
			if (C.MarkForDelete == false)
			{  
				DataLine = ConvertRecordToLine(C);
				MyFile << DataLine << endl;
			}
		}
		MyFile.close();
	}
	return vClients;
} 
vector<stClientData> LoadClientsDataFromFile(string FileName)
{
	vector<stClientData>vClients;
	
	fstream MyFile;
	MyFile.open(FileName, ios::in);
	if (MyFile.is_open())
	{
		string Line;
		stClientData Client;

		while (getline(MyFile, Line))
		{
			Client = ConvertLineToRecord(Line);
			vClients.push_back(Client);
		}

		MyFile.close();
	}
	return vClients;
}
void PrintClientData(stClientData Client)
{
	cout << "Account number: " << Client.AccountNum << endl;
	cout << "PinCode: " << Client.PinCode << endl;
	cout << "Name: " << Client.Name << endl;
	cout << "Phone number: " << Client.PhoneNum << endl;
	cout << "Account balance: " << Client.AccountBalance << endl;
}
void AddDataLineToFile(string FileName, string stDataLine)
{
	fstream MyFile;
	MyFile.open(FileName, ios::out | ios::app);
	if (MyFile.is_open())
	{
		MyFile << stDataLine << endl;
		MyFile.close();
	}
}
bool MarkClientForDeleteByAccountNumber(string AccountNumber, vector<stClientData>& vClients)
{
	for (stClientData& C : vClients)
	{
		if (C.AccountNum == AccountNumber)
		{
			C.MarkForDelete = true;
			return true;
		}
	}
	return false;
}
bool FindClientByAccountNumber(stClientData &Client, string AccountNumberToFind, vector<stClientData> vClients)
{

	for (stClientData& C : vClients)
	{
		if (C.AccountNum == AccountNumberToFind)
		{
			Client = C;
			return true;
		}
	}
	return false;
}
bool DeleteClientByAccountNumber(string AccountNumber, vector<stClientData>&vClients)
{
	stClientData Client;
	char Answer = 'n';

	if (FindClientByAccountNumber(Client, AccountNumber, vClients))
	{
		PrintClientData(Client);

		cout << "Do you want to delete client record 'n':No,'y':Yes? ";
		cin >> Answer;
		if (tolower(Answer) == 'y')
		{
			MarkClientForDeleteByAccountNumber(AccountNumber, vClients);
			SaveClientsDataToFile(ClientsFileName, vClients);

			vClients = LoadClientsDataFromFile(ClientsFileName);
			cout << "\n\nClient deleted successfully";
			return true;
		}
	}
	else
	{
		cout << endl << endl << AccountNumber << " was not found\n";
		return false;
	}
}
string ReadClientAccountNumber()
{
	string AccountNumber;
	cout << "Enter account number: ";
	cin >> AccountNumber;
	return AccountNumber;
}
int main()
{
	vector<stClientData>vClients = LoadClientsDataFromFile(ClientsFileName);
	string AccountNumber = ReadClientAccountNumber();

	DeleteClientByAccountNumber(AccountNumber, vClients);
	
	return 0;
}


